package fpt.aptech.server_be.payment.vnpay;

import fpt.aptech.server_be.core.response.ResponseObject;
import fpt.aptech.server_be.entities.Auction_Items;
import fpt.aptech.server_be.entities.Bidding;
import fpt.aptech.server_be.entities.User;
import fpt.aptech.server_be.repositories.Auction_ItemsRepository;
import fpt.aptech.server_be.repositories.UserRepository;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/v1/payment") // ƒê·ªïi tr·ª±c ti·∫øp th√†nh ƒë∆∞·ªùng d·∫´n c·ªë ƒë·ªãnh
@RequiredArgsConstructor
@Slf4j
public class PaymentController {
    private final PaymentService paymentService;
    @Autowired
    public Auction_ItemsRepository auction_ItemsRepository;

    @Autowired
    public UserRepository userRepository;

    @GetMapping("/vn-pay")
    public ResponseObject<PaymentDTO.VNPayResponse> pay(@RequestParam String productId,
                                                        @RequestParam String amount,
                                                        @RequestParam String orderId,HttpServletRequest request) {
        log.info("‚úÖ Nh·∫≠n productId: {}, amount: {}, orderId: {}", productId, amount, orderId);

        return new ResponseObject<>(HttpStatus.OK, "Success", paymentService.createVnPayPayment(request,productId));
    }

//    @GetMapping("/vn-pay-callback")
//    public void payCallbackHandler(HttpServletRequest request, HttpServletResponse response) throws IOException {
//        String status = request.getParameter("vnp_ResponseCode");
//        String orderInfo = request.getParameter("vnp_OrderInfo");
//
//        if (status == null || orderInfo == null) {
//            log.error("üö® L·ªói callback: Thi·∫øu th√¥ng tin thanh to√°n!");
//            response.sendRedirect("http://192.168.1.30:8080/payment-failed");
//            return;
//        }
//
//        try {
//            String productId = orderInfo.replace("Thanh to√°n cho s·∫£n ph·∫©m ID: ", "").trim();
//            log.info("‚úÖ Thanh to√°n th√†nh c√¥ng - productId: {}", productId);
//
//            // üî• T√¨m s·∫£n ph·∫©m theo ID
//            Auction_Items auctionItems = auction_ItemsRepository.findById(Integer.parseInt(productId))
//                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!"));
//
//            auctionItems.setSoldout(true);
//            auctionItems.setPaid(true);
//            auction_ItemsRepository.save(auctionItems);
//
//            // ‚úÖ L·∫•y th√¥ng tin ng∆∞·ªùi b√°n, ng∆∞·ªùi mua, v√† admin
//            User seller = auctionItems.getUser();
//            User buyer = auctionItems.getBuyer();
//            User admin = userRepository.findByEmail("admin@gmail.com")
//                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n admin!"));
//
//            if (seller == null || buyer == null) {
//                log.error("üö® L·ªói: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi b√°n ho·∫∑c ng∆∞·ªùi mua!");
//                response.sendRedirect("http://192.168.1.30:8080/payment-failed");
//                return;
//            }
//
//            // ‚úÖ L·∫•y gi√° th·∫Øng cu·ªôc t·ª´ `Bidding`
//            Bidding bidding = auctionItems.getBidding();
//            double finalPrice = bidding.getPrice();
//
//            // ‚úÖ Ki·ªÉm tra n·∫øu `money` c·ªßa buyer ho·∫∑c seller l√† null th√¨ ƒë·∫∑t v·ªÅ 0.0
//            seller.setMoney((seller.getMoney() != null ? seller.getMoney() : 0.0));
//            buyer.setMoney((buyer.getMoney() != null ? buyer.getMoney() : 0.0));
//            admin.setMoney((admin.getMoney() != null ? admin.getMoney() : 0.0));
//
//            // üî• Ki·ªÉm tra n·∫øu s·ªë d∆∞ c·ªßa buyer c√≥ ƒë·ªß kh√¥ng
//            if (buyer.getMoney() < finalPrice) {
//                log.error("üö® L·ªói: Ng∆∞·ªùi mua {} kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ thanh to√°n! S·ªë d∆∞: ${}", buyer.getName(), buyer.getMoney());
//                response.sendRedirect("http://192.168.1.30:8080/payment-failed");
//                return;
//            }
//
//            // ‚úÖ T√≠nh to√°n s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c sau khi tr·ª´ ph√≠ 2%
//            double fee = finalPrice * 0.02; // üî• T√≠nh ph√≠ 2%
//            double amountAfterFee = finalPrice - fee; // üî• S·ªë ti·ªÅn th·ª±c nh·∫≠n c·ªßa ng∆∞·ªùi b√°n
//
//            // ‚úÖ C·∫≠p nh·∫≠t ti·ªÅn
//            seller.setMoney(seller.getMoney() + amountAfterFee); // Ng∆∞·ªùi b√°n nh·∫≠n ti·ªÅn sau khi tr·ª´ ph√≠
//            buyer.setMoney(buyer.getMoney() - finalPrice); // Ng∆∞·ªùi mua b·ªã tr·ª´ to√†n b·ªô ti·ªÅn
//            admin.setMoney(admin.getMoney() + fee); // Admin nh·∫≠n 2% ph√≠ giao d·ªãch
//
//            // ‚úÖ L∆∞u c·∫≠p nh·∫≠t v√†o database
//            userRepository.save(seller);
//            userRepository.save(buyer);
//            userRepository.save(admin);
//
//            log.info("‚úÖ C·∫≠p nh·∫≠t s·ªë ti·ªÅn th√†nh c√¥ng: Ng∆∞·ªùi b√°n {} nh·∫≠n +${}, Ng∆∞·ªùi mua {} b·ªã tr·ª´ -${}, Admin nh·∫≠n +${}",
//                    seller.getName(), amountAfterFee, buyer.getName(), finalPrice, fee);
//
//            response.sendRedirect("http://localhost:3000/profile-page");
////            response.sendRedirect("myapp://mybids");
//
//        } catch (Exception e) {
//            log.error("üö® L·ªói x·ª≠ l√Ω callback: {}", e.getMessage());
//            response.sendRedirect("http://192.168.1.30:8080/payment-failed");
//        }
//    }

    @GetMapping("/vn-pay-callback")
    public void payCallbackHandler(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String status = request.getParameter("vnp_ResponseCode");
        String orderInfo = request.getParameter("vnp_OrderInfo");

        if (status == null || orderInfo == null) {
            log.error("üö® L·ªói callback: Thi·∫øu th√¥ng tin thanh to√°n!");
            response.sendRedirect("http://localhost:3000/payment-failed"); // üî• ƒê·ªïi th√†nh React URL
            return;
        }

        try {
            String productId = orderInfo.replace("Thanh to√°n cho s·∫£n ph·∫©m ID: ", "").trim();
            log.info("‚úÖ Thanh to√°n th√†nh c√¥ng - productId: {}", productId);

            // üî• T√¨m s·∫£n ph·∫©m theo ID
            Auction_Items auctionItems = auction_ItemsRepository.findById(Integer.parseInt(productId))
                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m!"));

            auctionItems.setSoldout(true);
            auctionItems.setPaid(true);
            auction_ItemsRepository.save(auctionItems);

            // ‚úÖ L·∫•y th√¥ng tin ng∆∞·ªùi b√°n, ng∆∞·ªùi mua, v√† admin
            User seller = auctionItems.getUser();
            User buyer = auctionItems.getBuyer();
            User admin = userRepository.findByEmail("admin@gmail.com")
                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n admin!"));

            if (seller == null || buyer == null) {
                log.error("üö® L·ªói: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi b√°n ho·∫∑c ng∆∞·ªùi mua!");
                response.sendRedirect("http://localhost:3000/payment-failed");
                return;
            }

            // ‚úÖ L·∫•y gi√° th·∫Øng cu·ªôc t·ª´ `Bidding`
            Bidding bidding = auctionItems.getBidding();
            double finalPrice = bidding.getPrice();

            // ‚úÖ Ki·ªÉm tra n·∫øu `money` c·ªßa buyer ho·∫∑c seller l√† null th√¨ ƒë·∫∑t v·ªÅ 0.0
            seller.setMoney((seller.getMoney() != null ? seller.getMoney() : 0.0));
            buyer.setMoney((buyer.getMoney() != null ? buyer.getMoney() : 0.0));
            admin.setMoney((admin.getMoney() != null ? admin.getMoney() : 0.0));

            // üî• Ki·ªÉm tra n·∫øu s·ªë d∆∞ c·ªßa buyer c√≥ ƒë·ªß kh√¥ng
            if (buyer.getMoney() < finalPrice) {
                log.error("üö® L·ªói: Ng∆∞·ªùi mua {} kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ thanh to√°n! S·ªë d∆∞: ${}", buyer.getName(), buyer.getMoney());
                response.sendRedirect("http://localhost:3000/payment-failed");
                return;
            }

            // ‚úÖ T√≠nh to√°n s·ªë ti·ªÅn ng∆∞·ªùi b√°n nh·∫≠n ƒë∆∞·ª£c sau khi tr·ª´ ph√≠ 2%
            double fee = finalPrice * 0.02; // üî• T√≠nh ph√≠ 2%
            double amountAfterFee = finalPrice - fee; // üî• S·ªë ti·ªÅn th·ª±c nh·∫≠n c·ªßa ng∆∞·ªùi b√°n

            // ‚úÖ C·∫≠p nh·∫≠t ti·ªÅn
            seller.setMoney(seller.getMoney() + amountAfterFee); // Ng∆∞·ªùi b√°n nh·∫≠n ti·ªÅn sau khi tr·ª´ ph√≠
            buyer.setMoney(buyer.getMoney() - finalPrice); // Ng∆∞·ªùi mua b·ªã tr·ª´ to√†n b·ªô ti·ªÅn
            admin.setMoney(admin.getMoney() + fee); // Admin nh·∫≠n 2% ph√≠ giao d·ªãch

            // ‚úÖ L∆∞u c·∫≠p nh·∫≠t v√†o database
            userRepository.save(seller);
            userRepository.save(buyer);
            userRepository.save(admin);

            log.info("‚úÖ C·∫≠p nh·∫≠t s·ªë ti·ªÅn th√†nh c√¥ng: Ng∆∞·ªùi b√°n {} nh·∫≠n +${}, Ng∆∞·ªùi mua {} b·ªã tr·ª´ -${}, Admin nh·∫≠n +${}",
                    seller.getName(), amountAfterFee, buyer.getName(), finalPrice, fee);

            // ‚úÖ Ki·ªÉm tra User-Agent ƒë·ªÉ ph√¢n bi·ªát Mobile v√† React Web
            String userAgent = request.getHeader("User-Agent");
            log.info("üì¢ User-Agent: {}", userAgent);

            if (userAgent != null && userAgent.contains("Mobile")) {
                response.sendRedirect("myapp://mybids"); // üî• Mobile chuy·ªÉn h∆∞·ªõng v·ªÅ app
            } else {
                response.sendRedirect("http://localhost:3000/profile-page"); // üî• React chuy·ªÉn h∆∞·ªõng v·ªÅ web
            }

        } catch (Exception e) {
            log.error("üö® L·ªói x·ª≠ l√Ω callback: {}", e.getMessage());
            response.sendRedirect("http://localhost:3000/payment-failed");
        }
    }

//    @GetMapping("/vn-pay-callback-mobile")
//    public void payCallbackHandlerMobile(HttpServletRequest request, HttpServletResponse response) throws IOException {
//        String status = request.getParameter("vnp_ResponseCode");
//        String orderInfo = request.getParameter("vnp_OrderInfo");
//        String productId = orderInfo.replace("Thanh to√°n cho s·∫£n ph·∫©m ID: ", ""); // L·ªçc productId
//
//        log.info("‚úÖ Thanh to√°n th√†nh c√¥ng - productId: {}", productId);
//
//        Auction_Items auctionItems = auction_ItemsRepository.findById(Integer.parseInt(productId)).get();
//        auctionItems.setSoldout(true);
//        auctionItems.setPaid(true);
//        auction_ItemsRepository.save(auctionItems);
//
//
//        String redirectUrl = String.format("http://localhost:3000/profile-page");
//
//        response.sendRedirect(redirectUrl);
//    }

//    mobile
@GetMapping("/bids/{userId}")
public Map<String, List<Auction_Items>> getBidsByUser(@PathVariable String userId) {
    log.info("üì¢ Truy v·∫•n danh s√°ch ƒë·∫•u gi√° cho userId: {}", userId);
    List<Auction_Items> paidItems = auction_ItemsRepository.findPaidItemsByUserId(userId);
    List<Auction_Items> unpaidItems = auction_ItemsRepository.findUnpaidItemsByUserId(userId);

    Map<String, List<Auction_Items>> result = new HashMap<>();
    result.put("paid", paidItems);
    result.put("unpaid", unpaidItems);
    log.info("‚úÖ ƒê√£ t√¨m th·∫•y {} s·∫£n ph·∫©m ƒë√£ thanh to√°n", paidItems.size());
    log.info("‚úÖ ƒê√£ t√¨m th·∫•y {} s·∫£n ph·∫©m ch∆∞a thanh to√°n", unpaidItems.size());
    return Map.of("paid", paidItems, "unpaid", unpaidItems);
}

    @GetMapping("/won-items/{userId}")
    public ResponseObject<List<Auction_Items>> getWonItemsByUser(@PathVariable String userId) {
        log.info("‚úÖ L·∫•y danh s√°ch s·∫£n ph·∫©m user ƒë√£ thanh to√°n - userId: {}", userId);

        List<Auction_Items> wonItems = auction_ItemsRepository.findWonItemsByUserId(userId);

        wonItems.forEach(item -> {
            if (item.getUser() != null) {
                log.info("üìå Ng∆∞·ªùi b√°n c·ªßa item {}: {}", item.getItem_id(), item.getUser().getName());
                item.getUser().setAuctionItems(null);
            } else {
                log.info("üö® Item {} kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi b√°n!", item.getItem_id());
            }
        });

        return new ResponseObject<>(HttpStatus.OK, "Success", wonItems);
    }
    @GetMapping("/unwon-items/{userId}")
    public ResponseObject<List<Auction_Items>> getUnwonItemsByUser(@PathVariable String userId) {
        log.info("‚úÖ L·∫•y danh s√°ch s·∫£n ph·∫©m ch∆∞a thanh to√°n - userId: {}", userId);

        List<Auction_Items> unwonItems = auction_ItemsRepository.findUnWonItemsByUserId(userId);

        unwonItems.forEach(item -> {
            if (item.getUser() != null) {
                log.info("üìå Ng∆∞·ªùi b√°n c·ªßa item {}: {}", item.getItem_id(), item.getUser().getName());
                item.getUser().setAuctionItems(null); // X√≥a d·ªØ li·ªáu v√≤ng l·∫∑p tr√°nh l·ªói JSON
            } else {
                log.info("üö® Item {} kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi b√°n!", item.getItem_id());
            }
        });

        return new ResponseObject<>(HttpStatus.OK, "Success", unwonItems);
    }

}
