package fpt.aptech.server_be.payment.vnpay;

import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
@RequiredArgsConstructor
@Slf4j
public class PaymentService {

    private final fpt.aptech.server_be.core.config.payment.VNPAYConfig vnPayConfig;

    public PaymentDTO.VNPayResponse createVnPayPayment(HttpServletRequest request, String productId) {
        try {
            log.info("âœ… Báº¯t Ä‘áº§u táº¡o thanh toÃ¡n VNPay cho productId: {}", productId);

            if (productId == null || productId.isEmpty()) {
                throw new IllegalArgumentException("ðŸš¨ Lá»—i: productId khÃ´ng há»£p lá»‡!");
            }

            // Láº¥y vÃ  kiá»ƒm tra amount
            String amountStr = request.getParameter("amount");
            if (amountStr == null || amountStr.isEmpty()) {
                throw new IllegalArgumentException("ðŸš¨ Lá»—i: Amount is required.");
            }

            double amountDouble = Double.parseDouble(amountStr);
            long amount = (long) (amountDouble * 100); // VNPay yÃªu cáº§u amount * 100

            // BankCode (náº¿u cÃ³)
            String bankCode = request.getParameter("bankCode");
            if (bankCode != null && bankCode.isEmpty()) {
                bankCode = null;
            }

            // Sinh má»›i vnp_TxnRef cho giao dá»‹ch nÃ y
            String vnpTxnRef = "ORD" + System.currentTimeMillis();

            // Táº¡o map param gá»­i lÃªn VNPay
            Map<String, String> vnpParamsMap = new HashMap<>(vnPayConfig.getVNPayConfig());
            vnpParamsMap.put("vnp_TxnRef", vnpTxnRef);   // GÃ¡n TxnRef má»›i sinh
            vnpParamsMap.put("vnp_Amount", String.valueOf(amount));
            if (bankCode != null) {
                vnpParamsMap.put("vnp_BankCode", bankCode);
            }
            vnpParamsMap.put("vnp_IpAddr", fpt.aptech.server_be.util.VNPayUtil.getIpAddress(request));
            vnpParamsMap.put("vnp_OrderInfo", "Thanh toÃ¡n cho sáº£n pháº©m ID: " + productId);

            log.info("ðŸ“¢ VNPay Request Parameters: {}", vnpParamsMap);

            // Sinh URL thanh toÃ¡n
            String queryUrl = fpt.aptech.server_be.util.VNPayUtil.getPaymentURL(vnpParamsMap, true);
            String hashData = fpt.aptech.server_be.util.VNPayUtil.getPaymentURL(vnpParamsMap, false);
            String vnpSecureHash = fpt.aptech.server_be.util.VNPayUtil.hmacSHA512(vnPayConfig.getSecretKey(), hashData);
            queryUrl += "&vnp_SecureHash=" + vnpSecureHash;

            String paymentUrl = vnPayConfig.getVnp_PayUrl() + "?" + queryUrl;

            log.info("âœ… Generated Payment URL: {}", paymentUrl);
            log.info("ðŸ†” vnp_TxnRef = {}", vnpTxnRef);

            return PaymentDTO.VNPayResponse.builder()
                    .code("ok")
                    .message("success")
                    .paymentUrl(paymentUrl)
                    .build();
        } catch (NumberFormatException e) {
            log.error("ðŸš¨ Amount khÃ´ng Ä‘Ãºng Ä‘á»‹nh dáº¡ng! GiÃ¡ trá»‹ nháº­n Ä‘Æ°á»£c: {}", request.getParameter("amount"));
            throw new RuntimeException("Lá»—i: Amount khÃ´ng há»£p lá»‡! Vui lÃ²ng nháº­p sá»‘ há»£p lá»‡.");
        } catch (Exception e) {
            log.error("ðŸš¨ Lá»—i khi táº¡o thanh toÃ¡n VNPay: {}", e.getMessage(), e);
            throw new RuntimeException("Lá»—i khi táº¡o thanh toÃ¡n VNPay: " + e.getMessage());
        }
    }
}
