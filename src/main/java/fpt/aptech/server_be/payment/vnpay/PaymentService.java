package fpt.aptech.server_be.payment.vnpay;


import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.HashMap;
import java.util.Map;

@Service
@RequiredArgsConstructor
@Slf4j
public class PaymentService {
    private final fpt.aptech.server_be.core.config.payment.VNPAYConfig vnPayConfig;

    public PaymentDTO.VNPayResponse createVnPayPayment(HttpServletRequest request,String productId) {
        try {
            log.info("‚úÖ B·∫Øt ƒë·∫ßu t·∫°o thanh to√°n VNPay cho productId: {}", productId);

            // 1Ô∏è‚É£ Ki·ªÉm tra productId c√≥ h·ª£p l·ªá kh√¥ng
            if (productId == null || productId.isEmpty()) {
                throw new IllegalArgumentException("üö® L·ªói: productId kh√¥ng h·ª£p l·ªá!");
            }

            // 2Ô∏è‚É£ Ki·ªÉm tra v√† l·∫•y amount t·ª´ request
            String amountStr = request.getParameter("amount");
            if (amountStr == null || amountStr.isEmpty()) {
                throw new IllegalArgumentException("üö® L·ªói: Amount is required.");
            }

            // ‚úÖ Chuy·ªÉn ƒë·ªïi `amount` t·ª´ String th√†nh `double` ƒë·ªÉ tr√°nh l·ªói parse
            double amountDouble = Double.parseDouble(amountStr);
            long amount = (long) (amountDouble * 100); // Chuy·ªÉn v·ªÅ VNƒê (VNPay y√™u c·∫ßu nh√¢n 100)

            // 3Ô∏è‚É£ Ki·ªÉm tra bankCode
            String bankCode = request.getParameter("bankCode");
            if (bankCode != null && bankCode.isEmpty()) {
                bankCode = null;
            }

            // 4Ô∏è‚É£ Chu·∫©n b·ªã d·ªØ li·ªáu ƒë·ªÉ g·ª≠i ƒë·∫øn VNPay
            Map<String, String> vnpParamsMap = new HashMap<>(vnPayConfig.getVNPayConfig());
            vnpParamsMap.put("vnp_Amount", String.valueOf(amount)); // ‚úÖ L∆∞u amount d∆∞·ªõi d·∫°ng String h·ª£p l·ªá
            if (bankCode != null) {
                vnpParamsMap.put("vnp_BankCode", bankCode);
            }
            vnpParamsMap.put("vnp_IpAddr", fpt.aptech.server_be.util.VNPayUtil.getIpAddress(request));
            vnpParamsMap.put("vnp_OrderInfo", "Thanh to√°n cho s·∫£n ph·∫©m ID: " + productId);

            log.info("üì¢ VNPay Request Parameters: {}", vnpParamsMap);

            // 5Ô∏è‚É£ T·∫°o URL thanh to√°n VNPay
            String queryUrl = fpt.aptech.server_be.util.VNPayUtil.getPaymentURL(vnpParamsMap, true);
            String hashData = fpt.aptech.server_be.util.VNPayUtil.getPaymentURL(vnpParamsMap, false);
            String vnpSecureHash = fpt.aptech.server_be.util.VNPayUtil.hmacSHA512(vnPayConfig.getSecretKey(), hashData);
            queryUrl += "&vnp_SecureHash=" + vnpSecureHash;

            String paymentUrl = vnPayConfig.getVnp_PayUrl() + "?" + queryUrl;

            log.info("‚úÖ Generated Payment URL: {}", paymentUrl);

            return PaymentDTO.VNPayResponse.builder()
                    .code("ok")
                    .message("success")
                    .paymentUrl(paymentUrl)
                    .build();
        } catch (NumberFormatException e) {
            log.error("üö® L·ªói: Amount kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng! Gi√° tr·ªã nh·∫≠n ƒë∆∞·ª£c: {}", request.getParameter("amount"));
            throw new RuntimeException("L·ªói: Amount kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.");
        } catch (Exception e) {
            log.error("üö® L·ªói khi t·∫°o thanh to√°n VNPay: {}", e.getMessage());
            throw new RuntimeException("L·ªói khi t·∫°o thanh to√°n VNPay: " + e.getMessage());
        }
    }

}
